using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace StronglyTypedId.Generator
{

    public static class LongSyntaxTreeGenerator
    {
        // Generated using https://roslynquoter.azurewebsites.net/
        public static SyntaxList<MemberDeclarationSyntax> CreateStronglyTypedIdSyntax(StructDeclarationSyntax original, bool generateJsonConverter)
        {
            // Get the name of the decorated member
            var idName = original.Identifier.ValueText;
            var typeConverterName = idName + "TypeConverter";
            var jsonConverterName = idName + "JsonConverter";

            var typeConverterAttribute = GetTypeConverterAttribute(typeConverterName);

            var attributes = generateJsonConverter
                ? List<AttributeListSyntax>(
                    new AttributeListSyntax[]
                    {
                        typeConverterAttribute,
                        GetJsonConverterAttribute(jsonConverterName)
                    })
                : SingletonList<AttributeListSyntax>(typeConverterAttribute);

            var members = GetMembers(idName)
                .Append(GetTypeConverter(typeConverterName, idName));
            if (generateJsonConverter)
            {
                members = members.Append(GetJsonConverter(jsonConverterName, idName));
            }

            return SingletonList<MemberDeclarationSyntax>(
                StructDeclaration(idName)
                    .WithAttributeLists(attributes)
                    .WithModifiers(
                        TokenList(
                            new[]
                            {
                                Token(SyntaxKind.ReadOnlyKeyword),
                                Token(SyntaxKind.PartialKeyword)
                            }))
                    .WithBaseList(
                        BaseList(
                            SeparatedList<BaseTypeSyntax>(
                                new SyntaxNodeOrToken[]
                                {
                                    SimpleBaseType(
                                        QualifiedName(
                                            IdentifierName("System"),
                                            GenericName(
                                                    Identifier("IComparable"))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName(idName)))))),
                                    Token(SyntaxKind.CommaToken),
                                    SimpleBaseType(
                                        QualifiedName(
                                            IdentifierName("System"),
                                            GenericName(
                                                    Identifier("IEquatable"))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName(idName))))))
                                })))
                    .WithMembers(List<MemberDeclarationSyntax>(members))
                    .WithCloseBraceToken(
                        Token(
                            TriviaList(),
                            SyntaxKind.CloseBraceToken,
                            TriviaList())));
        }

        private static IEnumerable<MemberDeclarationSyntax> GetMembers(string idName)
        {
            yield return PropertyDeclaration(
                        PredefinedType
                        (
                            Token(SyntaxKind.LongKeyword)),
                        Identifier("Value"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            Token(SyntaxKind.PublicKeyword)))
                    .WithAccessorList
                    (
                        AccessorList
                        (
                            SingletonList<AccessorDeclarationSyntax>
                            (
                                AccessorDeclaration
                                (
                                    SyntaxKind.GetAccessorDeclaration)
                                .WithSemicolonToken
                                (
                                    Token(SyntaxKind.SemicolonToken)))));
            yield return ConstructorDeclaration
            (
                        Identifier(idName))
                    .WithModifiers
                    (
                        TokenList
                        (
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SingletonSeparatedList<ParameterSyntax>
                            (
                                Parameter
                                (
                                    Identifier("value"))
                                .WithType
                                (
                                    PredefinedType
                                    (
                                        Token(SyntaxKind.LongKeyword))))))
                    .WithBody
                    (
                        Block
                        (
                            SingletonList<StatementSyntax>
                            (
                                ExpressionStatement
                                (
                                    AssignmentExpression
                                    (
                                        SyntaxKind.SimpleAssignmentExpression,
                                        IdentifierName("Value"),
                                        IdentifierName("value"))))));
            yield return FieldDeclaration
            (
                        VariableDeclaration
                        (
                            IdentifierName(idName))
                        .WithVariables
                        (
                            SingletonSeparatedList<VariableDeclaratorSyntax>
                            (
                                VariableDeclarator
                                (
                                    Identifier("Empty"))
                                .WithInitializer
                                (
                                    EqualsValueClause
                                    (
                                        ObjectCreationExpression
                                        (
                                            IdentifierName(idName))
                                        .WithArgumentList
                                        (
                                            ArgumentList
                                            (
                                                SingletonSeparatedList<ArgumentSyntax>
                                                (
                                                    Argument
                                                    (
                                                        LiteralExpression
                                            (
                                                SyntaxKind.NumericLiteralExpression,
                                                Literal(0L)))))))))))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.StaticKeyword),
                                Token(SyntaxKind.ReadOnlyKeyword)}));
            yield return MethodDeclaration
            (
                PredefinedType
                (
                    Token(SyntaxKind.BoolKeyword)),
                Identifier("Equals"))
            .WithModifiers
            (
                TokenList
                (
                    Token(SyntaxKind.PublicKeyword)))
            .WithParameterList
            (
                ParameterList
                (
                    SingletonSeparatedList<ParameterSyntax>
                    (
                        Parameter
                        (
                            Identifier("other"))
                        .WithType
                        (
                            IdentifierName(idName)))))
            .WithExpressionBody
            (
                ArrowExpressionClause
                (
                    InvocationExpression
                    (
                        MemberAccessExpression
                        (
                            SyntaxKind.SimpleMemberAccessExpression,
                            MemberAccessExpression
                            (
                                SyntaxKind.SimpleMemberAccessExpression,
                                ThisExpression(),
                                IdentifierName("Value")),
                            IdentifierName("Equals")))
                    .WithArgumentList
                    (
                        ArgumentList
                        (
                            SingletonSeparatedList<ArgumentSyntax>
                            (
                                Argument
                                (
                                    MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("other"),
                                        IdentifierName("Value"))))))))
            .WithSemicolonToken
            (
                Token(SyntaxKind.SemicolonToken));
            yield return MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.IntKeyword)),
                        Identifier("CompareTo"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            Token(SyntaxKind.PublicKeyword)))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SingletonSeparatedList<ParameterSyntax>
                            (
                                Parameter
                                (
                                    Identifier("other"))
                                .WithType
                                (
                                    IdentifierName(idName)))))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            InvocationExpression
                            (
                                MemberAccessExpression
                                (
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("Value"),
                                    IdentifierName("CompareTo")))
                            .WithArgumentList
                            (
                                ArgumentList
                                (
                                    SingletonSeparatedList<ArgumentSyntax>
                                    (
                                        Argument
                                        (
                                            MemberAccessExpression
                                            (
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("other"),
                                                IdentifierName("Value"))))))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
            yield return MethodDeclaration
            (
                PredefinedType
                (
                    Token(SyntaxKind.BoolKeyword)),
                Identifier("Equals"))
            .WithModifiers
            (
                TokenList
                (
                    new[]
                    {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
            .WithParameterList
            (
                ParameterList
                (
                    SingletonSeparatedList<ParameterSyntax>
                    (
                        Parameter
                        (
                            Identifier("obj"))
                        .WithType
                        (
                            PredefinedType
                            (
                                Token(SyntaxKind.ObjectKeyword))))))
            .WithBody
            (
                Block
                (
                    IfStatement
                    (
                        InvocationExpression
                        (
                            IdentifierName("ReferenceEquals"))
                        .WithArgumentList
                        (
                            ArgumentList
                            (
                                SeparatedList<ArgumentSyntax>
                                (
                                    new SyntaxNodeOrToken[]
                                    {
                                                Argument
                                                (
                                                    LiteralExpression
                                                    (
                                                        SyntaxKind.NullLiteralExpression)),
                                                Token(SyntaxKind.CommaToken),
                                                Argument
                                                (
                                                    IdentifierName("obj"))}))),
                        ReturnStatement
                        (
                            LiteralExpression
                            (
                                SyntaxKind.FalseLiteralExpression))),
                    ReturnStatement
                    (
                        BinaryExpression
                        (
                            SyntaxKind.LogicalAndExpression,
                            IsPatternExpression
                            (
                                IdentifierName("obj"),
                                DeclarationPattern
                                (
                                    IdentifierName(idName),
                                    SingleVariableDesignation
                                    (
                                        Identifier("other")))),
                            InvocationExpression
                            (
                                IdentifierName("Equals"))
                            .WithArgumentList
                            (
                                ArgumentList
                                (
                                    SingletonSeparatedList<ArgumentSyntax>
                                    (
                                        Argument
                                        (
                                            IdentifierName("other")))))))));
            yield return MethodDeclaration
            (
                        PredefinedType
                        (
                            Token(SyntaxKind.IntKeyword)),
                        Identifier("GetHashCode"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            InvocationExpression
                            (
                                MemberAccessExpression
                                (
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("Value"),
                                    IdentifierName("GetHashCode")))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
            yield return MethodDeclaration
            (
                        PredefinedType
                        (
                            Token(SyntaxKind.StringKeyword)),
                        Identifier("ToString"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            InvocationExpression
                            (
                                MemberAccessExpression
                                (
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    IdentifierName("Value"),
                                    IdentifierName("ToString")))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
            yield return OperatorDeclaration
            (
                        PredefinedType
                        (
                            Token(SyntaxKind.BoolKeyword)),
                        Token(SyntaxKind.EqualsEqualsToken))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.StaticKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("a"))
                                    .WithType
                                    (
                                        IdentifierName(idName)),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("b"))
                                    .WithType
                                    (
                                        IdentifierName(idName))})))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            BinaryExpression
                            (
                                SyntaxKind.EqualsExpression,
                                InvocationExpression
                                (
                                    MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("a"),
                                        IdentifierName("CompareTo")))
                                .WithArgumentList
                                (
                                    ArgumentList
                                    (
                                        SingletonSeparatedList<ArgumentSyntax>
                                        (
                                            Argument
                                            (
                                                IdentifierName("b"))))),
                                LiteralExpression
                                (
                                    SyntaxKind.NumericLiteralExpression,
                                    Literal(0L)))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
            yield return OperatorDeclaration
            (
                        PredefinedType
                        (
                            Token(SyntaxKind.BoolKeyword)),
                        Token(SyntaxKind.ExclamationEqualsToken))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new[]
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.StaticKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("a"))
                                    .WithType
                                    (
                                        IdentifierName(idName)),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("b"))
                                    .WithType
                                    (
                                        IdentifierName(idName))})))
                    .WithExpressionBody
                    (
                        ArrowExpressionClause
                        (
                            PrefixUnaryExpression
                            (
                                SyntaxKind.LogicalNotExpression,
                                ParenthesizedExpression
                                (
                                    BinaryExpression
                                    (
                                        SyntaxKind.EqualsExpression,
                                        IdentifierName("a"),
                                        IdentifierName("b"))))))
                    .WithSemicolonToken
                    (
                        Token(SyntaxKind.SemicolonToken));
        }

        private static ClassDeclarationSyntax GetJsonConverter(string jsonConverterName, string idName)
        {
            return ClassDeclaration(jsonConverterName)
        .WithBaseList
        (
            BaseList
            (
                SingletonSeparatedList<BaseTypeSyntax>
                (
                    SimpleBaseType
                    (
                        QualifiedName
                        (
                            QualifiedName
                            (
                                IdentifierName("Newtonsoft"),
                                IdentifierName("Json")),
                            IdentifierName("JsonConverter"))))))
        .WithMembers
        (
            List<MemberDeclarationSyntax>
            (
                new MemberDeclarationSyntax[]
                {
                    MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.BoolKeyword)),
                        Identifier("CanConvert"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new []
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SingletonSeparatedList<ParameterSyntax>
                            (
                                Parameter
                                (
                                    Identifier("objectType"))
                                .WithType
                                (
                                    QualifiedName
                                    (
                                        IdentifierName("System"),
                                        IdentifierName("Type"))))))
                    .WithBody
                    (
                        Block
                        (
                            SingletonList<StatementSyntax>
                            (
                                ReturnStatement
                                (
                                    BinaryExpression
                                    (
                                        SyntaxKind.EqualsExpression,
                                        IdentifierName("objectType"),
                                        TypeOfExpression
                                        (
                                            IdentifierName(idName))))))),
                    MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.VoidKeyword)),
                        Identifier("WriteJson"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new []
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("writer"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("Newtonsoft"),
                                                IdentifierName("Json")),
                                            IdentifierName("JsonWriter"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("value"))
                                    .WithType
                                    (
                                        PredefinedType
                                        (
                                            Token(SyntaxKind.ObjectKeyword))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("serializer"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("Newtonsoft"),
                                                IdentifierName("Json")),
                                            IdentifierName("JsonSerializer")))})))
                    .WithBody
                    (
                        Block
                        (
                            LocalDeclarationStatement
                            (
                                VariableDeclaration
                                (
                                    IdentifierName("var"))
                                .WithVariables
                                (
                                    SingletonSeparatedList<VariableDeclaratorSyntax>
                                    (
                                        VariableDeclarator
                                        (
                                            Identifier("id"))
                                        .WithInitializer
                                        (
                                            EqualsValueClause
                                            (
                                                CastExpression
                                                (
                                                    IdentifierName(idName),
                                                    IdentifierName("value"))))))),
                            ExpressionStatement
                            (
                                InvocationExpression
                                (
                                    MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        IdentifierName("serializer"),
                                        IdentifierName("Serialize")))
                                .WithArgumentList
                                (
                                    ArgumentList
                                    (
                                        SeparatedList<ArgumentSyntax>
                                        (
                                            new SyntaxNodeOrToken[]
                                            {
                                                Argument
                                                (
                                                    IdentifierName("writer")),
                                                Token(SyntaxKind.CommaToken),
                                                Argument
                                                (
                                                    MemberAccessExpression
                                                    (
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("id"),
                                                        IdentifierName("Value")))})))))),
                    MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.ObjectKeyword)),
                        Identifier("ReadJson"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new []
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("reader"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("Newtonsoft"),
                                                IdentifierName("Json")),
                                            IdentifierName("JsonReader"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("objectType"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            IdentifierName("System"),
                                            IdentifierName("Type"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("existingValue"))
                                    .WithType
                                    (
                                        PredefinedType
                                        (
                                            Token(SyntaxKind.ObjectKeyword))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("serializer"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("Newtonsoft"),
                                                IdentifierName("Json")),
                                            IdentifierName("JsonSerializer")))})))
                    .WithBody
                    (
                        Block
                        (
                            SingletonList<StatementSyntax>
                            (
                                ReturnStatement
                                (
                                    ObjectCreationExpression
                                    (
                                        IdentifierName(idName))
                                    .WithArgumentList
                                    (
                                        ArgumentList
                                        (
                                            SingletonSeparatedList<ArgumentSyntax>
                                            (
                                                Argument
                                                (
                                                    InvocationExpression
                                                    (
                                                        MemberAccessExpression
                                                        (
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("serializer"),
                                                            GenericName
                                                            (
                                                                Identifier("Deserialize"))
                                                            .WithTypeArgumentList
                                                            (
                                                                TypeArgumentList
                                                                (
                                                                    SingletonSeparatedList<TypeSyntax>
                                                                    (
                                                                        PredefinedType
                                                                        (
                                                                            Token(SyntaxKind.LongKeyword)))))))
                                                    .WithArgumentList
                                                    (
                                                        ArgumentList
                                                        (
                                                            SingletonSeparatedList<ArgumentSyntax>
                                                            (
                                                                Argument
                                                                (
                                                                    IdentifierName("reader")))))))))))))}));
        }

        private static ClassDeclarationSyntax GetTypeConverter(string typeConverterName, string idName)
        {
            return ClassDeclaration(typeConverterName)
        .WithBaseList
        (
            BaseList
            (
                SingletonSeparatedList<BaseTypeSyntax>
                (
                    SimpleBaseType
                    (
                        QualifiedName
                        (
                            QualifiedName
                            (
                                IdentifierName("System"),
                                IdentifierName("ComponentModel")),
                            IdentifierName("TypeConverter"))))))
        .WithMembers
        (
            List<MemberDeclarationSyntax>
            (
                new MemberDeclarationSyntax[]
                {
                    MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.BoolKeyword)),
                        Identifier("CanConvertFrom"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new []
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("context"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("System"),
                                                IdentifierName("ComponentModel")),
                                            IdentifierName("ITypeDescriptorContext"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("sourceType"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            IdentifierName("System"),
                                            IdentifierName("Type")))})))
                    .WithBody
                    (
                        Block
                        (
                            SingletonList<StatementSyntax>
                            (
                                ReturnStatement
                                (
                                    BinaryExpression
                                    (
                                        SyntaxKind.LogicalOrExpression,
                                        BinaryExpression
                                        (
                                            SyntaxKind.EqualsExpression,
                                            IdentifierName("sourceType"),
                                            TypeOfExpression
                                            (
                                                PredefinedType
                                                (
                                                    Token(SyntaxKind.LongKeyword)))),
                                        InvocationExpression
                                        (
                                            MemberAccessExpression
                                            (
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                BaseExpression(),
                                                IdentifierName("CanConvertFrom")))
                                        .WithArgumentList
                                        (
                                            ArgumentList
                                            (
                                                SeparatedList<ArgumentSyntax>
                                                (
                                                    new SyntaxNodeOrToken[]
                                                    {
                                                        Argument
                                                        (
                                                            IdentifierName("context")),
                                                        Token(SyntaxKind.CommaToken),
                                                        Argument
                                                        (
                                                            IdentifierName("sourceType"))})))))))),
                    MethodDeclaration
                    (
                        PredefinedType
                        (
                            Token(SyntaxKind.ObjectKeyword)),
                        Identifier("ConvertFrom"))
                    .WithModifiers
                    (
                        TokenList
                        (
                            new []
                            {
                                Token(SyntaxKind.PublicKeyword),
                                Token(SyntaxKind.OverrideKeyword)}))
                    .WithParameterList
                    (
                        ParameterList
                        (
                            SeparatedList<ParameterSyntax>
                            (
                                new SyntaxNodeOrToken[]
                                {
                                    Parameter
                                    (
                                        Identifier("context"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("System"),
                                                IdentifierName("ComponentModel")),
                                            IdentifierName("ITypeDescriptorContext"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("culture"))
                                    .WithType
                                    (
                                        QualifiedName
                                        (
                                            QualifiedName
                                            (
                                                IdentifierName("System"),
                                                IdentifierName("Globalization")),
                                            IdentifierName("CultureInfo"))),
                                    Token(SyntaxKind.CommaToken),
                                    Parameter
                                    (
                                        Identifier("value"))
                                    .WithType
                                    (
                                        PredefinedType
                                        (
                                            Token(SyntaxKind.ObjectKeyword)))})))
                    .WithBody
                    (
                        Block
                        (
                            IfStatement
                            (
                                IsPatternExpression
                                (
                                    IdentifierName("value"),
                                    DeclarationPattern
                                    (
                                        PredefinedType
                                        (
                                            Token(SyntaxKind.LongKeyword)),
                                        SingleVariableDesignation
                                        (
                                            Identifier("intValue")))),
                                Block
                                (
                                    SingletonList<StatementSyntax>
                                    (
                                        ReturnStatement
                                        (
                                            ObjectCreationExpression
                                            (
                                                IdentifierName(idName))
                                            .WithArgumentList
                                            (
                                                ArgumentList
                                                (
                                                    SingletonSeparatedList<ArgumentSyntax>
                                                    (
                                                        Argument
                                                        (
                                                            IdentifierName("intValue"))))))))),
                            ReturnStatement
                            (
                                InvocationExpression
                                (
                                    MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        BaseExpression(),
                                        IdentifierName("ConvertFrom")))
                                .WithArgumentList
                                (
                                    ArgumentList
                                    (
                                        SeparatedList<ArgumentSyntax>
                                        (
                                            new SyntaxNodeOrToken[]
                                            {
                                                Argument
                                                (
                                                    IdentifierName("context")),
                                                Token(SyntaxKind.CommaToken),
                                                Argument
                                                (
                                                    IdentifierName("culture")),
                                                Token(SyntaxKind.CommaToken),
                                                Argument
                                                (
                                                    IdentifierName("value"))}))))))}));
        }

        private static AttributeListSyntax GetJsonConverterAttribute(string jsonConverterName)
        {
            return AttributeList(
                SingletonSeparatedList<AttributeSyntax>(
                    Attribute(
                            QualifiedName(
                                QualifiedName(
                                    IdentifierName("Newtonsoft"),
                                    IdentifierName("Json")),
                                IdentifierName("JsonConverter")))
                        .WithArgumentList(
                            AttributeArgumentList(
                                SingletonSeparatedList<AttributeArgumentSyntax>(
                                    AttributeArgument(
                                        TypeOfExpression(
                                            IdentifierName(jsonConverterName))))))));
        }

        private static AttributeListSyntax GetTypeConverterAttribute(string typeConverterName)
        {
            return AttributeList(
                SingletonSeparatedList<AttributeSyntax>(
                    Attribute(
                            QualifiedName(
                                QualifiedName(
                                    IdentifierName("System"),
                                    IdentifierName("ComponentModel")),
                                IdentifierName("TypeConverter")))
                        .WithArgumentList(
                            AttributeArgumentList(
                                SingletonSeparatedList<AttributeArgumentSyntax>(
                                    AttributeArgument(
                                        TypeOfExpression(
                                            IdentifierName(typeConverterName))))))));
        }
    }
}